{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TimelyGator","text":""},{"location":"#project-description","title":"Project Description","text":"<p>TimelyGator is a time management tool aimed at helping users track their activities, set goals, and improve their focus. The project focuses on creating a simple and intuitive platform that empowers users to optimize their time effectively. With features like basic time tracking, session timers, and customizable activity categories, TimelyGator is designed to help individuals stay organized and productive. The core functionality will prioritize usability and practicality within a four-month development timeline, and may integrate AI-powered insights.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Cross-Platform Support: Access the app on both desktop and mobile devices for seamless time management.</li> <li>Data Synchronization: Automatically sync data across devices to ensure consistency and accessibility.</li> <li>Manual and Automatic Time Tracking: Track time spent on tasks with both manual input and basic automated tracking.</li> <li>Session Timers: Start and stop timed sessions to manage focused work periods.</li> <li>Daily and Weekly Reports: Generate simple reports to review time allocation and productivity trends.</li> <li>Customizable Categories: Create and organize activities into categories for better tracking.</li> <li>Basic Goal Setting: Set daily or weekly goals to maintain focus and monitor progress.</li> <li>Break Reminders: Get notifications to take breaks and maintain a healthy work rhythm.</li> </ul>"},{"location":"#team-members","title":"Team Members","text":""},{"location":"#front-end-engineers","title":"Front-End Engineers","text":"<ul> <li>Pulkit Garg</li> <li>Yash Deep Verma</li> </ul>"},{"location":"#back-end-engineers","title":"Back-End Engineers","text":"<ul> <li>Shreyansh Nayak</li> <li>Siddhant Chauhan</li> </ul> <p>TimelyGator is a practical tool for managing time efficiently. Join us in building a platform that helps users take charge of their schedules and achieve their goals!</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#timelygator-server-api-01","title":"TimelyGator Server API 0.1","text":"<p>This is the API documentation for the TimelyGator Server API.</p> <p>Terms of service: http://swagger.io/terms/</p> <p>Contact: API Support </p> <p>License: GPLv3</p>"},{"location":"api/#buckets","title":"buckets","text":""},{"location":"api/#get-v1buckets","title":"GET /v1/buckets","text":"<p>List all buckets</p> <p>Description Retrieves a list of all buckets in the system. Each bucket represents a collection of related events and contains metadata about the tracking session.</p>"},{"location":"api/#response-200-ok","title":"Response 200 OK","text":""},{"location":"api/#response-500-internal-server-error","title":"Response 500 Internal Server Error","text":""},{"location":"api/#get-v1bucketsbucket_id","title":"GET /v1/buckets/{bucket_id}","text":"<p>Manage bucket operations</p> <p>Description Endpoint for creating, retrieving, updating, and deleting buckets</p> <p>Input parameters</p> Parameter In Type Default Nullable Description bucket_id path None No Unique identifier for the bucket force query None No Force deletion flag (required for DELETE unless in testing mode)"},{"location":"api/#response-200-ok_1","title":"Response 200 OK","text":""},{"location":"api/#response-204-no-content","title":"Response 204 No Content","text":""},{"location":"api/#response-400-bad-request","title":"Response 400 Bad Request","text":""},{"location":"api/#response-404-not-found","title":"Response 404 Not Found","text":""},{"location":"api/#response-500-internal-server-error_1","title":"Response 500 Internal Server Error","text":""},{"location":"api/#put-v1bucketsbucket_id","title":"PUT /v1/buckets/{bucket_id}","text":"<p>Manage bucket operations</p> <p>Description Endpoint for creating, retrieving, updating, and deleting buckets</p> <p>Input parameters</p> Parameter In Type Default Nullable Description bucket_id path None No Unique identifier for the bucket force query None No Force deletion flag (required for DELETE unless in testing mode)"},{"location":"api/#response-200-ok_2","title":"Response 200 OK","text":""},{"location":"api/#response-204-no-content_1","title":"Response 204 No Content","text":""},{"location":"api/#response-400-bad-request_1","title":"Response 400 Bad Request","text":""},{"location":"api/#response-404-not-found_1","title":"Response 404 Not Found","text":""},{"location":"api/#response-500-internal-server-error_2","title":"Response 500 Internal Server Error","text":""},{"location":"api/#post-v1bucketsbucket_id","title":"POST /v1/buckets/{bucket_id}","text":"<p>Manage bucket operations</p> <p>Description Endpoint for creating, retrieving, updating, and deleting buckets</p> <p>Input parameters</p> Parameter In Type Default Nullable Description bucket_id path None No Unique identifier for the bucket force query None No Force deletion flag (required for DELETE unless in testing mode)"},{"location":"api/#response-200-ok_3","title":"Response 200 OK","text":""},{"location":"api/#response-204-no-content_2","title":"Response 204 No Content","text":""},{"location":"api/#response-400-bad-request_2","title":"Response 400 Bad Request","text":""},{"location":"api/#response-404-not-found_2","title":"Response 404 Not Found","text":""},{"location":"api/#response-500-internal-server-error_3","title":"Response 500 Internal Server Error","text":""},{"location":"api/#delete-v1bucketsbucket_id","title":"DELETE /v1/buckets/{bucket_id}","text":"<p>Manage bucket operations</p> <p>Description Endpoint for creating, retrieving, updating, and deleting buckets</p> <p>Input parameters</p> Parameter In Type Default Nullable Description bucket_id path None No Unique identifier for the bucket force query None No Force deletion flag (required for DELETE unless in testing mode)"},{"location":"api/#response-200-ok_4","title":"Response 200 OK","text":""},{"location":"api/#response-204-no-content_3","title":"Response 204 No Content","text":""},{"location":"api/#response-400-bad-request_3","title":"Response 400 Bad Request","text":""},{"location":"api/#response-404-not-found_3","title":"Response 404 Not Found","text":""},{"location":"api/#response-500-internal-server-error_4","title":"Response 500 Internal Server Error","text":""},{"location":"api/#events","title":"events","text":""},{"location":"api/#get-v1bucketsbucket_idevents","title":"GET /v1/buckets/{bucket_id}/events","text":"<p>Manage events within a bucket</p> <p>Description Endpoint for creating and retrieving events associated with a specific bucket. Events represent individual time-tracking entries or activities.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description bucket_id path None No ID of the bucket containing the events end query None No End time in ISO8601 format (for GET) event body object No Event object or array of event objects (for POST) limit query None No Maximum number of events to return (for GET) start query None No Start time in ISO8601 format (for GET)"},{"location":"api/#response-200-ok_5","title":"Response 200 OK","text":""},{"location":"api/#response-201-created","title":"Response 201 Created","text":""},{"location":"api/#response-400-bad-request_4","title":"Response 400 Bad Request","text":""},{"location":"api/#response-404-not-found_4","title":"Response 404 Not Found","text":""},{"location":"api/#response-500-internal-server-error_5","title":"Response 500 Internal Server Error","text":""},{"location":"api/#post-v1bucketsbucket_idevents","title":"POST /v1/buckets/{bucket_id}/events","text":"<p>Manage events within a bucket</p> <p>Description Endpoint for creating and retrieving events associated with a specific bucket. Events represent individual time-tracking entries or activities.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description bucket_id path None No ID of the bucket containing the events end query None No End time in ISO8601 format (for GET) event body object No Event object or array of event objects (for POST) limit query None No Maximum number of events to return (for GET) start query None No Start time in ISO8601 format (for GET)"},{"location":"api/#response-200-ok_6","title":"Response 200 OK","text":""},{"location":"api/#response-201-created_1","title":"Response 201 Created","text":""},{"location":"api/#response-400-bad-request_5","title":"Response 400 Bad Request","text":""},{"location":"api/#response-404-not-found_5","title":"Response 404 Not Found","text":""},{"location":"api/#response-500-internal-server-error_6","title":"Response 500 Internal Server Error","text":""},{"location":"api/#get-v1bucketsbucket_ideventscount","title":"GET /v1/buckets/{bucket_id}/events/count","text":"<p>Get event count for a bucket</p> <p>Description Retrieve the count of events for a specific bucket within an optional time range.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description bucket_id path None No Bucket ID end query None No End time in ISO8601 format start query None No Start time in ISO8601 format"},{"location":"api/#response-200-ok_7","title":"Response 200 OK","text":""},{"location":"api/#response-500-internal-server-error_7","title":"Response 500 Internal Server Error","text":""},{"location":"api/#get-v1bucketsbucket_ideventsevent_id","title":"GET /v1/buckets/{bucket_id}/events/{event_id}","text":"<p>Delete a single event</p> <p>Description Retrieve a specific event from a bucket by its ID. Delete a specific event from a bucket by its ID.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description bucket_id path None No Bucket ID bucket_id path None No Bucket ID event_id path None No Event ID event_id path None No Event ID"},{"location":"api/#response-200-ok_8","title":"Response 200 OK","text":""},{"location":"api/#response-404-not-found_6","title":"Response 404 Not Found","text":""},{"location":"api/#response-500-internal-server-error_8","title":"Response 500 Internal Server Error","text":""},{"location":"api/#delete-v1bucketsbucket_ideventsevent_id","title":"DELETE /v1/buckets/{bucket_id}/events/{event_id}","text":"<p>Delete a single event</p> <p>Description Retrieve a specific event from a bucket by its ID. Delete a specific event from a bucket by its ID.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description bucket_id path None No Bucket ID bucket_id path None No Bucket ID event_id path None No Event ID event_id path None No Event ID"},{"location":"api/#response-200-ok_9","title":"Response 200 OK","text":""},{"location":"api/#response-404-not-found_7","title":"Response 404 Not Found","text":""},{"location":"api/#response-500-internal-server-error_9","title":"Response 500 Internal Server Error","text":""},{"location":"api/#post-v1bucketsbucket_idheartbeat","title":"POST /v1/buckets/{bucket_id}/heartbeat","text":"<p>Send bucket heartbeat</p> <p>Description Updates or creates an event in the specified bucket to indicate active status. If an existing event is found within the pulsetime window, it will be updated instead of creating a new event.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description bucket_id path None No ID of the bucket to send heartbeat to event body object No Event data to record pulsetime query None No Time window in seconds to merge events"},{"location":"api/#response-200-ok_10","title":"Response 200 OK","text":""},{"location":"api/#response-400-bad-request_6","title":"Response 400 Bad Request","text":""},{"location":"api/#response-409-conflict","title":"Response 409 Conflict","text":""},{"location":"api/#response-500-internal-server-error_10","title":"Response 500 Internal Server Error","text":""},{"location":"api/#export-import","title":"export-import","text":""},{"location":"api/#get-v1bucketsbucket_idexport","title":"GET /v1/buckets/{bucket_id}/export","text":"<p>Export a bucket</p> <p>Description Export a specific bucket and its data as a JSON attachment.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description bucket_id path None No Bucket ID"},{"location":"api/#response-200-ok_11","title":"Response 200 OK","text":""},{"location":"api/#response-500-internal-server-error_11","title":"Response 500 Internal Server Error","text":""},{"location":"api/#get-v1export","title":"GET /v1/export","text":"<p>Export all bucket data</p> <p>Description Exports all buckets and their associated events as a JSON file attachment. The exported data can be used for backup or migration purposes.</p>"},{"location":"api/#response-200-ok_12","title":"Response 200 OK","text":""},{"location":"api/#response-500-internal-server-error_12","title":"Response 500 Internal Server Error","text":""},{"location":"api/#post-v1import","title":"POST /v1/import","text":"<p>Import all buckets</p> <p>Description Import buckets and their data from a JSON payload, either as request body or multipart form.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description body body None No Import payload"},{"location":"api/#response-200-ok_13","title":"Response 200 OK","text":""},{"location":"api/#response-400-bad-request_7","title":"Response 400 Bad Request","text":""},{"location":"api/#response-500-internal-server-error_13","title":"Response 500 Internal Server Error","text":""},{"location":"api/#system","title":"system","text":""},{"location":"api/#get-v1info","title":"GET /v1/info","text":"<p>Get server information</p> <p>Description Returns detailed information about the TimelyGator server instance including version, build time, and other deployment-specific configuration.</p>"},{"location":"api/#response-200-ok_14","title":"Response 200 OK","text":""},{"location":"api/#response-500-internal-server-error_14","title":"Response 500 Internal Server Error","text":""},{"location":"backend/","title":"TimelyGator Backend Architecture","text":""},{"location":"backend/#overview","title":"Overview","text":"<p>The TimelyGator backend is designed as a modular, scalable system that processes and stores time-based activity data from various sources. It consists of several interconnected components that work together to provide a robust data collection and processing pipeline.</p>"},{"location":"backend/#architecture-components","title":"Architecture Components","text":""},{"location":"backend/#1-core-components","title":"1. Core Components","text":""},{"location":"backend/#tg-core","title":"tg-core","text":"<p>The foundation of the backend system that provides:</p> <ul> <li>Event and database models</li> <li>Common utilities and shared functionality</li> <li>Core interfaces and abstractions</li> <li>Configuration management</li> </ul>"},{"location":"backend/#tg-server","title":"tg-server","text":"<p>The main REST API server that:</p> <ul> <li>Handles client requests and authentication</li> <li>Processes and stores collected data</li> <li>Serves processed data to the frontend</li> <li>Manages data aggregation and analytics</li> <li>Implements the API endpoints documented in api.md</li> </ul>"},{"location":"backend/#2-data-collection-modules","title":"2. Data Collection Modules","text":""},{"location":"backend/#tg-active-window","title":"tg-active-window","text":"<ul> <li>Monitors active window changes on the user's system</li> <li>Captures window titles, application names, and timestamps</li> <li>Implements efficient event batching</li> <li>Handles window focus changes and idle states</li> </ul>"},{"location":"backend/#tg-active-web","title":"tg-active-web","text":"<ul> <li>Tracks browser tab activity across supported browsers</li> <li>Captures URLs, page titles, and tab states</li> <li>Implements cross-browser compatibility</li> <li>Handles tab switching and navigation events</li> </ul> <pre><code>graph LR\n  subgraph tg_main\n    timelygator --&gt; tg-server\n    timelygator --&gt; tg-active-web\n    timelygator --&gt; tg-active-window\n    tg-active-web --&gt; tg-client\n    tg-active-window --&gt; tg-client\n  end\n\n  subgraph Observers\n    tg-active-window -- Watches --&gt; S1[Active window]\n    tg-active-web -- Watches --&gt; S[Active tab]\n  end\n\n  tg-client -- Requests --&gt; tg-server\n  S1 -- Dump Data --&gt; tg-server\n  S -- Dump Data --&gt; tg-server\n\n  subgraph Frontend\n    tg-server -- Serves --&gt; web-ui\n    web-ui -- Queries --&gt; tg-server\n  end\n\n  subgraph tg_core\n    tg-core --&gt; S2[provides Event_model, database_models, utilities to all other components]\n  end</code></pre>"},{"location":"backend/#3-data-storage-layer","title":"3. Data Storage Layer","text":"<p>The backend uses a SQLite database with GORM as the ORM layer. Key components include:</p>"},{"location":"backend/#database-models","title":"Database Models","text":"<ul> <li>Bucket: Groups related events with metadata</li> <li>Event: Stores individual activity records with timestamps</li> <li>User: Manages user accounts and preferences</li> <li>Category: Handles website and application categorization</li> </ul>"},{"location":"backend/#data-operations","title":"Data Operations","text":"<ul> <li>Efficient event insertion and retrieval</li> <li>Time-based querying and aggregation</li> <li>Data cleanup and maintenance</li> <li>Backup and recovery procedures</li> </ul> <pre><code>graph TD\n    A[Observers] --&gt;|Raw Events| B[Event Queue]\n    B --&gt;|Process| Z\n    Z --&gt;|Query| E[API Server]\n    E --&gt;|Serve| F[Frontend]\n    G --&gt;|Store| D\n\nsubgraph Z[\" \"]\ndirection LR\n    C[Event Processor] --&gt;|Store| D[Database]\n    C --&gt;|Analyze| G[Analytics Engine]\nend</code></pre>"},{"location":"backend/#4-processing-pipeline","title":"4. Processing Pipeline","text":""},{"location":"backend/#event-processing","title":"Event Processing","text":"<ol> <li>Raw events are collected from observers</li> <li>Events are validated and normalized</li> <li>Data is enriched with additional context</li> <li>Events are batched and stored in the database</li> </ol>"},{"location":"backend/#analytics-engine","title":"Analytics Engine","text":"<ul> <li>Processes raw data into meaningful insights</li> <li>Generates daily and historical reports</li> <li>Calculates productivity metrics</li> <li>Implements AI-powered analysis (experimental)</li> </ul>"},{"location":"backend/#5-api-layer","title":"5. API Layer","text":"<p>The backend exposes a RESTful API that supports:</p> <ul> <li>Real-time data streaming</li> <li>Historical data queries</li> <li>User management</li> <li>Configuration updates</li> <li>Analytics endpoints</li> </ul>"},{"location":"backend/#design-analysis","title":"Design Analysis","text":"<p>Security Considerations:</p> <ul> <li>All data is encrypted at rest</li> <li>API endpoints require authentication</li> <li>Rate limiting on all endpoints</li> <li>Input validation and sanitization</li> <li>Regular security audits</li> </ul> <p>Scalability Features:</p> <ul> <li>Modular design allows for easy extension</li> <li>Event batching for efficient processing</li> <li>Configurable data retention policies</li> <li>Support for multiple data sources</li> <li>Horizontal scaling capability</li> </ul> <p>Monitoring and Maintenance:</p> <ul> <li>Health check endpoints</li> <li>Performance metrics collection</li> <li>Error logging and alerting</li> <li>Automated backup procedures</li> <li>Database optimization routines</li> </ul> <p>Development Guidelines:</p> <ul> <li>Clear separation of concerns</li> <li>Consistent error handling</li> <li>Comprehensive documentation</li> <li>Unit and integration tests</li> <li>Performance benchmarks</li> </ul> <p>Deployment:</p> <ul> <li>Containerized deployment</li> <li>Environment-specific configuration</li> <li>Automated deployment pipeline</li> <li>Rollback procedures</li> <li>Monitoring setup</li> </ul>"},{"location":"backend/#future-considerations","title":"Future Considerations","text":"<ul> <li>Support for additional data sources</li> <li>Enhanced analytics capabilities</li> <li>Real-time processing improvements</li> <li>Machine learning integration</li> <li>Cross-platform compatibility</li> </ul> <p>This document is part of the TimelyGator backend system documentation. For related information, see the database.md and frontend.md documentation.</p>"},{"location":"database/","title":"TimelyGator Database","text":"<p>This document describes the internal schema, models, and API for the TimelyGator database system, which stores time-based event data. It uses GORM over SQLite as the backend.</p>"},{"location":"database/#overview","title":"Overview","text":"<p>TimelyGator stores data in two primary models:</p> <ul> <li>Bucket: Metadata container that groups events.</li> <li>Event: A timestamped JSON object representing an observation or action.</li> </ul> <p>These models are defined in <code>models.go</code>, and the operational interface is built in <code>database.go</code>.</p>"},{"location":"database/#models","title":"Models","text":""},{"location":"database/#event","title":"<code>Event</code>","text":"<p>Represents a single atomic record (e.g., a window switch, browser tab, keystroke).</p> <pre><code>ID        uint           // Primary key\nBucketID  string         // Foreign key to Bucket\nTimestamp time.Time      // UTC timestamp of event\nDuration  float64        // Duration in seconds\nData      datatypes.JSON // Payload (e.g., {app, title, url, incognito})\n</code></pre> <p>Utility methods: - <code>ToJSONDict()</code> \u2013 expands the event into a merged JSON map. - <code>DataEqualEvent(other)</code> \u2013 compares two events by JSON contents. - <code>DataEqualJSON(json)</code> \u2013 compares against a raw JSON blob.</p>"},{"location":"database/#bucket","title":"<code>Bucket</code>","text":"<p>Defines a collection of time-ordered events and related metadata.</p> <pre><code>ID       string         // Primary key\nName     *string        // Optional label\nType     string         // Application type (e.g., currentwindow)\nClient   string         // Originating client name\nHostname string         // Device hostname\nCreated  time.Time      // When the bucket was created\nData     datatypes.JSON // Optional metadata\n</code></pre>"},{"location":"database/#initialization","title":"Initialization","text":"<p>The function <code>InitDB(cfg Config) (*Datastore, error)</code> initializes the database:</p> <ul> <li>Locates the <code>data/</code> directory.</li> <li>Opens or creates a SQLite database file.</li> <li>Calls <code>AutoMigrate</code> for <code>Bucket</code> and <code>Event</code>.</li> </ul> <p>Returns a <code>*Datastore</code>, the primary handle.</p>"},{"location":"database/#core-api","title":"Core API","text":""},{"location":"database/#datastore-global-manager","title":"<code>Datastore</code> (global manager)","text":"<pre><code>type Datastore struct {\n    db *gorm.DB\n}\n</code></pre>"},{"location":"database/#methods","title":"Methods","text":"<ul> <li><code>DB() *gorm.DB</code> \u2013 exposes raw GORM handle</li> <li><code>Buckets() map[string]map[string]interface{}</code> \u2013 returns metadata for all buckets</li> <li><code>CreateBucket(...)</code> \u2013 inserts a new bucket</li> <li><code>UpdateBucket(bucketID, updates)</code> \u2013 modifies fields in a bucket</li> <li><code>DeleteBucket(bucketID)</code> \u2013 removes the bucket</li> <li><code>GetBucket(bucketID)</code> \u2013 returns a <code>*Bucket</code> object if found</li> </ul>"},{"location":"database/#bucket-logical-event-group","title":"<code>Bucket</code> (logical event group)","text":"<p>Returned by <code>GetBucket()</code> or <code>NewBucket()</code>, provides full access to a bucket\u2019s events.</p> <pre><code>type Bucket struct {\n    ds       *Datastore\n    bucketID string\n}\n</code></pre>"},{"location":"database/#bucket-api","title":"Bucket API","text":"<ul> <li><code>Metadata()</code> \u2013 returns the bucket\u2019s current fields</li> <li><code>Get(limit, start, end)</code> \u2013 fetches N events, optionally filtered by time range</li> <li><code>GetByID(eventID)</code> \u2013 fetches an event by primary key</li> <li><code>Insert(event[s])</code> \u2013 insert single or batch of events</li> <li><code>Delete(eventID)</code> \u2013 remove an event</li> <li><code>Replace(eventID, event)</code> \u2013 update an event in-place</li> <li><code>ReplaceLast(event)</code> \u2013 update the most recent event</li> <li><code>GetEventCount(start, end)</code> \u2013 return the total number of events</li> </ul>"},{"location":"database/#event-insertion","title":"Event Insertion","text":"<p>Use the helper: <pre><code>NewEvent(id, timestamp, duration, data)\n</code></pre> This handles: - Accepting <code>time.Time</code>, <code>string</code>, or <code>nil</code> for timestamp - Accepting <code>time.Duration</code> or <code>float64</code> for duration - Marshaling map data into <code>datatypes.JSON</code></p> <p>Then insert: <pre><code>bucket.Insert(event)\n</code></pre></p>"},{"location":"database/#json-utilities","title":"JSON Utilities","text":"<p>JSON fields are stored using <code>gorm.io/datatypes.JSON</code>. Several helper functions and methods exist to ensure round-trip safety, shallow equality, and proper merging with metadata.</p>"},{"location":"database/#notes","title":"Notes","text":"<ul> <li>All timestamps are stored in UTC, truncated to millisecond precision.</li> <li>The <code>created</code> field in <code>Bucket</code> is the bucket creation time, not the first event.</li> <li>Events are not automatically expired \u2014 cleanup policies are managed externally.</li> <li>The system currently uses SQLite, but GORM allows switching to Postgres or MySQL.</li> </ul> <p>This document is part of the TimelyGator backend system documentation.</p>"},{"location":"frontend/","title":"Core Concepts &amp; Features","text":""},{"location":"frontend/#usage-tracking","title":"Usage Tracking","text":"<ul> <li>What is Tracked: The app tracks the time spent on websites (primarily via browser activity) and the usage of standalone browsers (like Mozilla, Ch, etc.).</li> <li>Active Screen Time (<code>Time elapsed</code>): Measures the total time you are actively using your device (with keyboard or mouse input) while the app's tracking is running. This metric resets automatically each day.</li> <li>Idle Time (<code>Idle Time</code>): Measures the time when no keyboard or mouse activity is detected while the app is tracking (essentially AFK/Away From Keyboard time).</li> <li>Data Usage: Tracks the amount of network data consumed during the monitored period.</li> </ul>"},{"location":"frontend/#activity-categorization","title":"Activity Categorization","text":"<ul> <li>Automatic Categorization: When you visit a website, the app automatically assigns it a category (e.g., Educational, Entertainment, Social Media, eCommerce, Blog) based on backend flags and AI analysis.</li> <li>Manual Editing: You can manually change the category assigned to any website via the Tabs section.</li> <li>Scope: Categorization primarily applies to websites visited within browsers. Standalone applications are tracked but generally not assigned these types of categories.</li> <li>Limitations: Currently, there is no option for bulk-categorizing websites or creating custom categorization rules.</li> </ul>"},{"location":"frontend/#tab-management-tabs-section","title":"Tab Management (Tabs Section)","text":"<ul> <li>Tracking: Monitors your open browser tabs.</li> <li>States:<ul> <li><code>Active Tabs</code>: Tabs currently loaded and potentially using system resources.</li> <li><code>Inactive / Hybernating Tabs</code>: Tabs that haven't been viewed or used for a while. The app actively determines this status. The <code>Hybernating Tabs</code> count reflects the total number of tabs currently in this 'Inactive' state.</li> <li><code>Awake Rate</code>: The percentage of your total open tabs that are currently 'Active'.</li> </ul> </li> <li> <p>Actions:</p> <ul> <li><code>Delete</code>: Closes the actual tab in your web browser.</li> </ul> </li> </ul>"},{"location":"frontend/#data-integration-connected-accounts","title":"Data Integration (Connected Accounts)","text":"<ul> <li>You can connect external accounts (e.g., Google, Twitter, GitHub) via the Settings section.</li> <li>Purpose: This is used to integrate data from those services (e.g., calendar events, repository activity) to provide richer context and more accurate insights into your productivity patterns. It is not solely for login purposes.</li> </ul>"},{"location":"frontend/#4-navigating-the-app","title":"4. Navigating the App","text":""},{"location":"frontend/#overview-tab","title":"Overview Tab","text":"<p>Your main dashboard for a quick summary of your daily activity.</p> <ul> <li>Key Metrics:<ul> <li><code>Time elapsed</code>: Total active screen time tracked today (resets daily).</li> <li><code>Ideal Time</code>: Total idle (AFK) time tracked today. (See definition above).</li> <li><code>Tabs open</code>: Current number of open browser tabs.</li> <li><code>Data Used</code>: Network data consumed today.</li> </ul> </li> <li>Time Distribution (Pie Chart): Shows the percentage breakdown of your active time spent on specific top websites for the current day.</li> <li>Website Distribution (Bar Chart): Shows time spent across different website categories (Educational, Entertainment, etc.) for the current day. </li> </ul>"},{"location":"frontend/#tabs-tab","title":"Tabs Tab","text":"<p>Manage and analyze your browser tabs.</p> <ul> <li>Key Metrics: <code>Total Tabs</code>, <code>Active Tabs</code>, <code>Hybernating Tabs</code> (count of inactive tabs), <code>Awake Rate</code>.</li> <li>Tabs List: Detailed view of each open tab:<ul> <li>Website Icon &amp; Domain</li> <li>Page Title (<code>Name</code>)</li> <li>Category (<code>Type</code>) - Editable</li> <li>Status (<code>Active</code> / <code>Inactive</code>)</li> <li>Actions ( <code>Delete</code> to close tab)</li> </ul> </li> <li>Search: Find specific open tabs quickly.</li> <li>Website Distribution (Pie Chart): Shows the percentage breakdown of your currently open tabs by category (e.g., 30% Social, 20% Educational). This differs from the Overview chart as it's based on tab count, not time spent.</li> </ul>"},{"location":"frontend/#analytics-tab","title":"Analytics Tab","text":"<p>Dive deeper into trends and progress.</p> <ul> <li>Top Items: Displays your most used Application, Window Title, Browser Domain, and Website Category for the selected period. </li> <li>Actual vs Target (Graph): Visualizes your actual tracked hours against a dynamic target over time.<ul> <li><code>Actual</code>: Your recorded active hours.</li> <li><code>Target</code>: A dynamically adjusted optimal productivity time, calculated by the app based on general recommendations and your past performance/behaviour. It is not manually set by the user.</li> <li><code>Time Period</code>: You can select the time frame for analysis (e.g., This Week, This Month, This Year, Quarter) using the dropdown menu. </li> </ul> </li> </ul>"},{"location":"frontend/#settings-tab","title":"Settings Tab","text":"<p>Configure your profile, preferences, and account settings.</p> <ul> <li>Profile: View and edit your name and email address.</li> <li>Notifications: Enable or disable notifications via different channels:<ul> <li><code>Push Notifications</code></li> <li><code>Email Notifications</code></li> <li><code>SMS Notifications</code></li> <li>Triggers: Notifications may include general reminders, daily/weekly reports, app updates, productivity tips, and promotional messages.</li> </ul> </li> <li>Security:<ul> <li><code>Two-Factor Authentication</code>: Option to enhance account security (toggle available).</li> <li><code>Change Password</code>.</li> </ul> </li> <li>Connected Accounts: Manage linked accounts (Google, Twitter, GitHub, etc.) used for data integration.</li> <li>Danger Zone:<ul> <li><code>Delete Account</code>: Permanently removes your account and all associated data from both the servers and your local machine. This action is irreversible.</li> </ul> </li> </ul>"},{"location":"frontend/#5-understanding-your-productivity-metrics","title":"5. Understanding Your Productivity Metrics","text":"<ul> <li>Time elapsed: Daily active screen time while tracked. Helps understand total engagement.</li> <li>Ideal Time (Idle Time): Daily inactive/AFK time. Useful for seeing break times or periods away.</li> <li>Tabs open: Current tab count. High numbers might indicate multitasking or information overload.</li> <li>Data Used: Network usage. Relevant for users on limited data plans.</li> <li>Active Tabs / Hybernating Tabs / Awake Rate: Metrics related to tab management and potential system resource usage by the browser. Lower awake rates might suggest many unused tabs are open.</li> <li>Time Distribution (Overview): Identifies top time-consuming websites daily.</li> <li>Website Distribution (Overview): Shows daily time allocation across activity types (work, learning, leisure).</li> <li>Website Distribution (Tabs): Shows the categorical makeup of your currently open tabs (focus vs. distraction).</li> <li>Actual vs Target (Analytics): Tracks progress towards a dynamically adjusted productivity goal over selected periods.</li> <li>Top Items (Analytics): Highlights the primary applications, domains, and categories used over the selected period.</li> </ul>"},{"location":"frontend/#6-frequently-asked-questions-faq","title":"6. Frequently Asked Questions (FAQ)","text":"<ul> <li>Q: What does \"Ideal Time\" mean?<ul> <li>A: In the current version, \"Ideal Time\" represents the time you were idle or away from your keyboard/mouse while the app was tracking.</li> </ul> </li> <li>Q: How are websites categorized? Can I change a category?<ul> <li>A: Websites are categorized automatically by the app using backend flags and AI. You can manually change the category for any site using the 'Edit' button in the 'Tabs' section. Bulk editing or custom rules are not currently supported.</li> </ul> </li> <li>Q: Does the app track applications too?<ul> <li>A: Yes, the app tracks time spent in standalone applications as well as websites, although categorization primarily applies to websites.</li> </ul> </li> <li>Q: What happens when I click 'Delete' next to a tab?<ul> <li>A: It closes the actual tab in your web browser.</li> </ul> </li> <li>Q: How is the 'Target' in the Analytics graph determined?<ul> <li>A: The Target is dynamically calculated by the app based on generally accepted optimal productivity times and adjusted based on your own performance patterns. You do not set it manually.</li> </ul> </li> <li>Q: Is my data secure?<ul> <li>A: [Refer to Privacy section summary and link to full policy]</li> </ul> </li> <li>Q: How do I delete my account and data?<ul> <li>A: Go to Settings -&gt; Danger Zone and click 'Delete Account'. This removes data from servers and your local machine. It cannot be undone.</li> </ul> </li> </ul>"},{"location":"observers/afk-observer/","title":"AFK Observer","text":"<p>The AFK Observer is a TimelyGator component that detects user activity/inactivity (AFK status) by monitoring global keyboard and mouse input. It sends heartbeats to the TimelyGator server when a user becomes AFK or returns.</p>"},{"location":"observers/afk-observer/#overview","title":"Overview","text":"<ul> <li>Platform: Linux only (via gohook)</li> <li>Input Sources: Global mouse and keyboard listeners</li> <li>Heartbeat Mechanism: Sends periodic status events with <code>afk</code> or <code>not-afk</code></li> <li>Command-line Configurable: Uses <code>cobra</code> for flexible CLI interface</li> </ul>"},{"location":"observers/afk-observer/#cli-usage","title":"CLI Usage","text":"<pre><code>cd server/observers/afk-observer\n\n./go run ./main \\\n  --host localhost \\\n  --port 8080 \\\n  --timeout 300s \\\n  --poll-time 10s \\\n  --verbose\n</code></pre> Flag Description Default <code>--host</code> TimelyGator server host <code>localhost</code> <code>--port</code> Server port <code>8080</code> <code>--timeout</code> Seconds of inactivity before AFK <code>180s</code> <code>--poll-time</code> Frequency of polling user input <code>5s</code> <code>--verbose</code> Enable verbose logging <code>false</code> <code>--testing</code> Enable testing mode (no real uploads) <code>false</code>"},{"location":"observers/afk-observer/#how-it-works","title":"How It Works","text":"<ol> <li>Startup: Initializes the TimelyGator client, checks platform compatibility (Linux-only).</li> <li>Event Loop: Captures keyboard and mouse input events using <code>gohook</code>.</li> <li>Activity Tracking:</li> <li>MouseListener tracks:<ul> <li>Movement (deltaX/Y)</li> <li>Clicks</li> <li>Scrolls</li> </ul> </li> <li>KeyboardListener tracks:<ul> <li>Key presses</li> </ul> </li> <li>These listeners update a shared <code>lastActivity</code> timestamp.</li> <li>Heartbeat Loop:</li> <li>Runs every <code>poll-time</code>.</li> <li>Checks time since last input.</li> <li>Sends heartbeats when state changes (AFK \u2192 active or vice versa), or periodically to confirm status.</li> </ol>"},{"location":"observers/afk-observer/#bucket-format","title":"Bucket Format","text":"<p>The observer uses a single bucket per device: <pre><code>afkstatus\n</code></pre></p> <p>Event example: <pre><code>{\n  \"timestamp\": \"2025-04-21T16:03:12Z\",\n  \"duration\": 0,\n  \"data\": {\n    \"status\": \"not-afk\"\n  }\n}\n</code></pre></p>"},{"location":"observers/afk-observer/#components","title":"Components","text":""},{"location":"observers/afk-observer/#afkwatcher","title":"<code>AFKWatcher</code>","text":"<p>Located in <code>afk.go</code>, manages: - Client startup - Bucket creation - Heartbeat generation logic</p>"},{"location":"observers/afk-observer/#listener-package","title":"<code>listener</code> Package","text":"<p>Implements: - <code>MouseListener</code> \u2014 motion, click, scroll tracking - <code>KeyboardListener</code> \u2014 key press tracking - <code>baseEventFactory</code> \u2014 thread-safe shared structure for tracking state - <code>StartAllListeners()</code> \u2014 OS-level event router using <code>gohook</code></p>"},{"location":"observers/afk-observer/#unixgo","title":"<code>unix.go</code>","text":"<ul> <li>Singleton <code>LastInputUnix</code> monitors event timestamps</li> <li>Provides <code>SecondsSinceLastInput()</code> for polling loop</li> </ul>"},{"location":"observers/afk-observer/#development-testing","title":"Development &amp; Testing","text":"<ul> <li>Run with <code>--verbose</code> to log AFK state transitions</li> <li>Simulate user inactivity by avoiding all input</li> <li>Uses <code>os.Getppid()</code> to exit if parent process dies</li> <li><code>testing</code> flag disables real server writes (useful for dry-run/testing)</li> </ul>"},{"location":"observers/afk-observer/#limitations","title":"Limitations","text":"<ul> <li>Currently supports Linux only</li> <li>No explicit debounce; frequent input toggles AFK quickly</li> <li>Scroll events may vary across devices/environments</li> </ul> <p>This documentation is part of the TimelyGator observability suite.</p>"},{"location":"observers/window-observer/","title":"Window Observer","text":"<p>The Window Observer is a TimelyGator component that monitors the active window on the user\u2019s machine and sends periodic heartbeats to the TimelyGator server with metadata about the current application, window title, URL, and incognito state.</p>"},{"location":"observers/window-observer/#overview","title":"Overview","text":"<ul> <li>Cross-platform: Supports Linux (X11), macOS, and Windows.</li> <li>Polling-based: Checks the active window at a configurable interval.</li> <li>Anonymization: Optionally exclude or regex-mask window titles.</li> <li>Swift helper (macOS): Fallback to a native Swift helper for improved performance.</li> </ul>"},{"location":"observers/window-observer/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.17+ installed.</li> <li>TimelyGator server running and accessible.</li> <li>To run go to <code>cd server</code> and run <code>go run .</code></li> <li>Platform-specific dependencies:</li> <li>Linux: X11 development libraries (<code>libx11-dev</code>, <code>xprop</code>).</li> <li>macOS: JXA or AppleScript support.</li> <li>Windows: Windows API access via <code>golang.org/x/sys/windows</code>.</li> </ul>"},{"location":"observers/window-observer/#configuration","title":"Configuration","text":"<p>The observer reads default settings from environment variables or a <code>.env</code> file (via godotenv). You can also override via CLI flags.</p>"},{"location":"observers/window-observer/#environment-variables-env","title":"Environment Variables / <code>.env</code>","text":"<ul> <li><code>HOST</code> \u2013 TimelyGator server host (default: <code>localhost</code>).</li> <li><code>PORT</code> \u2013 TimelyGator server port (default: <code>8080</code>).</li> <li><code>TESTING</code> \u2013 Enable testing mode (default: <code>false</code>).</li> <li><code>VERBOSE</code> \u2013 Enable verbose logging (default: <code>false</code>).</li> <li><code>EXCLUDE_TITLE</code> \u2013 Always replace titles with <code>excluded</code> (default: <code>false</code>).</li> <li><code>EXCLUDE_TITLES</code> \u2013 Comma-separated regex list to anonymize only matching titles.</li> <li><code>POLL_TIME</code> \u2013 Polling interval in seconds (default: <code>1</code>).</li> <li><code>STRATEGY</code> \u2013 macOS strategy: <code>jxa</code>, <code>applescript</code>, or <code>swift</code>.</li> </ul>"},{"location":"observers/window-observer/#cli-usage","title":"CLI Usage","text":"<pre><code>cd server/observers/window-observer\n\ngo run ./main\n  --host YOUR_HOST \\\n  --port YOUR_PORT \\\n  --testing=false \\\n  --verbose \\\n  --exclude-title=false \\\n  --exclude-titles \"^Secret.*,Private.*\" \\\n  --poll-time 2.5 \\\n  --strategy jxa\n</code></pre> Flag Description Default <code>--host</code> TimelyGator server host <code>cfg.Host</code> <code>--port</code> TimelyGator server port <code>cfg.Port</code> <code>--testing</code> Testing mode: skips real server write <code>cfg.Testing</code> <code>--verbose</code> Turn on verbose (microseconds) logging <code>cfg.Verbose</code> <code>--exclude-title</code> Replace every title with <code>excluded</code> <code>cfg.ExcludeTitle</code> <code>--exclude-titles</code> Regex list for titles to anonymize <code>cfg.ExcludeTitles</code> <code>--poll-time</code> Polling interval (seconds) <code>cfg.PollTime</code> <code>--strategy</code> macOS only: JXA, AppleScript, or Swift helper selection <code>cfg.Strategy</code>"},{"location":"observers/window-observer/#how-it-works","title":"How It Works","text":"<ol> <li>Startup: Load <code>.env</code>, parse flags, ensure macOS permissions if needed.</li> <li>Connect: Create a TimelyGator client, wait for server readiness, create a <code>currentwindow</code> bucket.</li> <li>Swift Helper (macOS / <code>swift</code> strategy):</li> <li>Launches a bundled Swift binary for continuous monitoring.</li> <li>Sends its own heartbeats via the helper and exits Go loop.</li> <li>Polling Loop:</li> <li>Every <code>poll-time</code> seconds, call <code>lib.GetCurrentWindow(strategy)</code>.</li> <li>Optionally anonymize titles via <code>--exclude-title</code> or <code>--exclude-titles</code> regexes.</li> <li>Marshal window data and send a heartbeat with <code>timestamp</code>, <code>duration=0</code>, and the JSON payload.</li> <li>Continue until interrupted by SIGINT / SIGTERM.</li> </ol>"},{"location":"observers/window-observer/#development-testing","title":"Development &amp; Testing","text":"<ul> <li>Unit Tests: See <code>main_test.go</code> and <code>lib_common_test.go</code>. Run:</li> </ul> <pre><code># in window-observer directory\ngo test ./lib\ngo test\n</code></pre> <ul> <li>Platform Stubs: <code>lib_darwin_stub.go</code>, <code>lib_windows_stub.go</code> allow compilation on non-target OS.</li> <li>Adding Mocks: Override <code>getCurrentWindow</code> in tests to simulate various window states.</li> </ul>"},{"location":"observers/window-observer/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Permission Denied (macOS): Ensure Accessibility permissions are granted to the observer binary. This is a very common issue on macOS.</li> <li>X11 Connection Errors (Linux): Confirm <code>$DISPLAY</code> is set and X server is running.</li> <li>Empty Window Info: If title or app is blank, falls back to <code>\"unknown\"</code>.</li> </ul> <p>This documentation is part of the TimelyGator observability suite.</p>"},{"location":"sprint/Sprint1/","title":"SE Project : Sprint 1","text":"<p>This document contains the details of the first sprint of the Software Engineering project. The sprint focused on setting up the project structure, defining the main objectives, and evaluating feasibility. The goal of the sprint is to establish a solid foundation for the project and define the roadmap for future development.</p> <p>Repository Link: Timelygator/Timelygator Sprint1.md: docs/files/sprint/sprint1.md</p>"},{"location":"sprint/Sprint1/#discussion-1-project-structure","title":"Discussion 1 : Project structure","text":"<p>For the project structure, we decided following points,</p> <ul> <li>A monorepo approach with separate folders for frontend and backend codebases.</li> <li>Documentation will be hosted in a separate folder.</li> <li>Semantic versioning will be followed for versioning the project.</li> <li>GitHub discussions will be used for team communication and decision-making, and GitHub issues will be used for tracking tasks and bugs.</li> </ul> <p>The project structure is as follows:</p> <pre><code>project-name/\n\u251c\u2500\u2500 web-ui/              # Frontend codebase\n\u251c\u2500\u2500 server/              # Backend codebase\n\u251c\u2500\u2500 docs/                # Documentation\n\u251c\u2500\u2500 CONTRIBUTING.md      # Guidelines for contributing to the project.\n\u251c\u2500\u2500 CODE_OF_CONDUCT.md   # A code of conduct for team interactions.\n\u251c\u2500\u2500 LICENSE              # License file\n\u251c\u2500\u2500 CHANGELOG.md         # Document changes and updates to the project over time.\n\u2514\u2500\u2500 README.md            # Project README\n</code></pre> <p>Links: discussion #5 issue #20</p>"},{"location":"sprint/Sprint1/#discussion-2-goals-and-competing-products","title":"Discussion 2 : Goals and competing products","text":"<p>The main objectives of the project are:</p> <ul> <li>To provide automated time tracking with minimal user input.</li> <li>Store time series data for analysis and reporting.</li> <li>Provide insights and recommendations based on user data.</li> <li>Support cross-platform usage with synchronization.</li> <li>Create a user-friendly interface for tracking time and setting goals.</li> </ul> <p>We have also identified some competing products in the market:</p> <ul> <li>Rize</li> <li>Toggl</li> <li>ActivityWatch</li> </ul>"},{"location":"sprint/Sprint1/#discussion-3-tech-stack","title":"Discussion 3 : Tech stack","text":"<p>For the tech stack, we decided to use the following technologies:</p> <ul> <li>Frontend:</li> <li><code>react: 18.3.1</code>: JavaScript library for building user interfaces.</li> <li><code>react-dom: 18.3.1</code>: DOM-specific methods that can be used at the top level of a web app.</li> <li><code>react-router-dom: 6.25.1</code>: A library for routing in React applications.</li> <li><code>vite: 5.3.4</code>: Fast build tool.   -<code>tailwindcss: 3.4.7</code>: Utility-first CSS framework for rapid UI development.</li> <li><code>recharts: 2.12.7</code>: Charting library built on React components.</li> <li><code>framer-motion: 11.3.19</code>: for animations and gestures in React.</li> <li><code>lucide-react: 0.417.0</code>: Customizable SVG icons for React.</li> <li> <p>Other dependencies</p> </li> <li> <p>Backend:</p> </li> <li><code>spf13/cobra</code> for CLI support.</li> <li><code>gorilla/mux</code> for API routing and middleware.</li> <li><code>gorm.io/gorm</code> for ORM and database management, using SQLite backend.</li> </ul> <p>Basic backend implemantaion done in <code>be-dev</code> branch.</p>"},{"location":"sprint/Sprint1/#discussion-4-documentation","title":"Discussion 4 : Documentation","text":"<p>For documentation, we decided to use swaggo/swag for backend API and for frontend Vite. The documentation will be hosted in the <code>docs/</code> folder and will include guides, API references, and user manuals.</p> <p>Links:   Backend - issue #19 draft PR #17   Frontend - issue #11 PR #27</p>"},{"location":"sprint/Sprint1/#discussion-5-repository-settings","title":"Discussion 5 : Repository settings","text":"<p>We discussed the repository settings and decided to:</p> <ul> <li>Enable branch protection for the <code>main</code> and <code>develop</code> branches.</li> <li>Use GitHub discussions for team communication and decision-making.</li> <li>Use GitHub issues for tracking tasks and bugs.</li> <li><code>Git Flow</code> branching strategy will be followed with <code>main</code>, <code>develop</code>, <code>fe-dev</code>, <code>be-dev</code> branches.</li> <li>Follow Conventional Commits standard for commit messages.</li> </ul> <p>Links: discussion #3 discussion #12</p>"},{"location":"sprint/Sprint1/#user-stories","title":"User stories","text":"<p>The user stories planned for the first sprint have been,</p>"},{"location":"sprint/Sprint1/#frontend","title":"Frontend","text":"<p>As a potential user, I want to know how the application works and what features are available.</p> <ul> <li>[x] Create a landing page with an overview of the application.</li> <li>[ ] Add a feature list with descriptions. (reason: Basic templates have to be finalized before uploading with a feature list with description)</li> </ul> <p>As a user, I want to maintain my profile and settings.</p> <ul> <li>[x] Create a profile page with user information.</li> <li>[x] Add Theme toggle for light and dark mode. (A bit buggy (Issue #38))</li> <li>[ ] Add settings page for customizing the application. (reason: Settings/Controls have to be finalized)</li> </ul> <p>As a user, I want a centralized dashboard for tracking time and goals.</p> <ul> <li>[x] Create a dashboard with time tracking and goal setting.</li> <li>[x] Add a daily, weekly, and monthly view for tracking time.</li> <li>[x] Show browser insights and tracking data.</li> </ul>"},{"location":"sprint/Sprint1/#backend","title":"Backend","text":"<p>As a developer, I want to set up the backend structure and database.</p> <ul> <li>[x] Initialize the project with Cobra CLI support.</li> <li>[x] Add GORM for ORM and database management.</li> <li>[x] Support environment files, logging, and configuration.</li> <li>[ ] Create models for user, time tracking, and goals. (reason: OAuth have to be finalized)</li> </ul> <p>As a developer, I want to set up the API routes and controllers.</p> <ul> <li>[x] Add Gorilla Mux for API routing and middleware.</li> <li>[x] Create API routes for buckets, time tracking, and goals.</li> <li>[ ] Implement CRUD operations for user data. (reason: OAuth have to be finalized)</li> </ul> <p>As a developer, I want to enable OAuth2 authentication for user login.</p> <ul> <li>[ ] Add OAuth2 support for user authentication. (reason: Google Client ID and Consent Screen requires confirmation)</li> <li>[ ] Implement login and registration endpoints. (reason: Callback URL and Redirect URL require CORS and other headers to be set)</li> </ul> <p>As a developer, I want a documentation system for API references and guides.</p> <ul> <li>[x] Set up Swaggo for API documentation.</li> <li>[x] Add godoc comments to API routes and controllers.</li> <li>[ ] Generate Swagger docs for API endpoints automatically. (reason: go generate command requires setup)</li> </ul> <p>As a developer, I want a centralized logging system for tracking errors and events.</p> <ul> <li>[x] Add logging support.</li> <li>[x] Implement logging for API requests and responses.</li> </ul>"},{"location":"sprint/Sprint1/#tasks","title":"Tasks","text":"<p>TO get a better understanding of the user stories, their status, and people contributing to them,</p> <ol> <li> <p>@PulkitGarg777 # Frontend</p> <ul> <li>Setup basic <code>React</code> App using <code>Vite</code></li> <li>Created landing page with feature list</li> <li>Added dashboard with time tracking and goal setting</li> <li>Displaying daily, weekly, and monthly view for tracking time</li> <li>Added browser insights and tracking data templates</li> </ul> </li> <li> <p>@YashDVerma # Frontend</p> <ul> <li>Set up a profile page with user information</li> <li>Implemented theme toggle for light and dark mode</li> <li>Tested chart libraries like Apexcharts and recharts</li> <li>Basic setup for theme</li> </ul> </li> <li> <p>@shreyansh-nayak-ufl # Backend</p> <ul> <li>Initialized the project and added Cobra CLI support</li> <li>Added Gorilla Mux for API routing and middleware</li> <li>Implemented logging support and .env configuration setup</li> <li>Set up Swaggo for API documentation</li> <li>Added godoc comments to API routes and controllers</li> </ul> </li> <li> <p>@siddhant-0707 # Backend</p> <ul> <li>Created the Backend Architecture Design</li> <li>Implemented GORM for ORM and database management</li> <li>Created models for events, time tracking, and goals</li> <li>Added API routes for user, time tracking, and goals</li> <li>Initialize Server using Gorilla Mux</li> </ul> </li> </ol>"},{"location":"sprint/Sprint1/#conclusion","title":"Conclusion","text":"<p>The first sprint of the project focused on setting up the project structure, defining the main objectives, and evaluating feasibility. The team discussed the project structure, goals, tech stack, documentation, and repository settings. User stories were defined for frontend and backend development, and tasks were assigned to team members. The sprint laid the foundation for future development and established a roadmap for the project. The team will continue to work on the platform and provide updates in the next sprint.</p>"},{"location":"sprint/Sprint2/","title":"SE Project : Sprint 2","text":"<p>This document contains the details of the work done in Sprint 2 of the Software Engineering Project. This sprint we focused on integrating the frontend with the backend, setting up the necessary dependencies, and writing unit tests for the frontend and backend components. The main goal was to ensure that the frontend and backend work together seamlessly.</p> <p>Repository Link: Timelygator/Timelygator Sprint2.md: docs/files/sprint/sprint2.md</p>"},{"location":"sprint/Sprint2/#sprint-1-rolled-over-tasks","title":"Sprint 1 Rolled Over Tasks","text":"<p>Some of the tasks from Sprint 1 were carried over to Sprint 2. These tasks were completed in Sprint 2.</p> <ul> <li>Frontend</li> <li>Address any pending UI/UX improvements.</li> <li>Refactor code where necessary for better maintainability.</li> <li>Backend</li> <li>Completed pending endpoints for <code>/heartbeat</code> and <code>/data</code>.</li> <li>Ensure proper error handling and response formats.</li> </ul>"},{"location":"sprint/Sprint2/#user-stories","title":"User Stories","text":""},{"location":"sprint/Sprint2/#frontend","title":"Frontend","text":"<p>Frontend Work Summary as mentioned in Discussion #49</p> <ul> <li>Working with APIs &amp; Data Display</li> <li>Fetch and display data correctly in respective fields or StatBox components.</li> <li>Ensure proper error handling and loading states.</li> <li>Setting Up Dependencies</li> <li>Install and configure required testing libraries.</li> <li>Set up necessary state management or API-handling tools.</li> <li>Frontend-Backend Integration</li> <li>Connect the frontend with the backend API.</li> <li>Ensure proper data flow between the two.</li> <li>Debug and fix any API-related issues.</li> <li>Testing</li> <li>Write a simple test using Cypress to validate key workflows.</li> <li>Implement unit tests for frontend components, aiming for a 1:1 test-to-function ratio.</li> <li>Additional Suggested Tasks:</li> <li>Ensure consistent coding styles across the frontend.</li> <li>Add documentation for key components and API usage.</li> </ul>"},{"location":"sprint/Sprint2/#backend","title":"Backend","text":"<p>Backend Work Summary inlcudes completion of the following tasks,</p> <ul> <li><code>Client</code> package The <code>TimelyGatorClient</code> serves as the primary interface for interacting with the TimelyGator server. The following tasks were completed as part of the client implementation:</li> <li>GET, POST, DELETE Requests: Added utility methods (<code>get</code>, <code>post</code>, <code>deleteReq</code>) for interacting with the server API.</li> <li>Bucket Management:<ul> <li>Create, delete, and manage buckets on the server.</li> <li>Integrated functionality to handle both queued and immediate requests.</li> </ul> </li> <li>Event Handling:<ul> <li>Implemented methods to retrieve, insert, and delete events from specific buckets.</li> <li>Added support for retrieving event counts and exporting/importing event data.</li> </ul> </li> <li>Heartbeat Functionality:<ul> <li>Developed <code>Heartbeat</code> method to manage activity data through server heartbeats.</li> <li>Included pre-merge and post-merge logic to optimize event data flow.</li> </ul> </li> <li> <p>Query Execution:</p> <ul> <li>Added <code>Query</code> method to send custom queries to the server and retrieve results.</li> </ul> </li> <li> <p><code>AFK Observer</code> The <code>AFKWatcher</code> module was developed to monitor user inactivity and send AFK status to the server through the client. The work included:</p> </li> <li>Platform Validation: Ensured that the <code>AFKWatcher</code> only runs on supported platforms (Linux).</li> <li>Signal Handling: Added graceful shutdown capabilities using system signals (<code>os.Interrupt</code>, <code>syscall.SIGTERM</code>).</li> <li>AFK Detection Loop:<ul> <li>Implemented the <code>heartbeatLoop()</code> to regularly check AFK status.</li> <li>Utilized <code>SecondsSinceLastInput()</code> to detect inactivity.</li> </ul> </li> <li> <p>Heartbeat Event Creation:</p> <ul> <li>Created <code>Event</code> objects with status (<code>afk</code> or <code>not-afk</code>) as JSON.</li> <li>Sent accurate heartbeat data to the server using the <code>client.Heartbeat()</code> method.</li> </ul> </li> <li> <p><code>Chrome Browser Observer</code> The Chrome Browser Extension for TimelyGator was developed to capture detailed browsing activity, including active tabs, URLs, and time spent on websites. The extension integrates seamlessly with the TimelyGator client to provide accurate and categorized tracking of web activity.</p> </li> <li>URL Tracking<ul> <li>Automatically captures the active tab's URL.</li> <li>Sends browsing data to the TimelyGator server at regular intervals.</li> </ul> </li> <li>Tab Activity Monitoring<ul> <li>Detects when a tab is opened, closed, or switched.</li> <li>Tracks time spent on each tab and categorizes the data.</li> </ul> </li> <li>Event Communication<ul> <li>Utilizes message passing between content scripts and the background script.</li> <li>Establishes a secure and efficient connection with the TimelyGator client</li> </ul> </li> <li> <p>Manifest v3 Compatibility:</p> <ul> <li>Built using the latest Chrome extension guidelines and technologies.</li> <li>Ensures compliance with Chrome Web Store policies.</li> </ul> </li> <li> <p>Swagger API Documentation</p> </li> <li>API Documentation: Generated detailed documentation for the TimelyGator API using Swagger.<ul> <li>Used the <code>swag</code> package to automatically generate API documentation.</li> <li>Ensured that all API endpoints, request/response formats, and error codes were documented.</li> </ul> </li> <li>API Testing: Validated the API documentation by testing each endpoint using Swagger UI.<ul> <li>Verified that the API responses matched the expected formats.</li> <li>Ensured that the API was fully functional and ready for integration with the frontend.</li> </ul> </li> <li>Postman Collection: Created a Postman collection for testing the TimelyGator API.<ul> <li>Included sample requests for each endpoint to facilitate testing and debugging.</li> <li>Ensured that the Postman collection was up-to-date with the latest API changes.</li> </ul> </li> </ul>"},{"location":"sprint/Sprint2/#unit-tests","title":"Unit Tests","text":"<p>The following unit tests were written for the frontend and backend components.</p>"},{"location":"sprint/Sprint2/#frontend_1","title":"Frontend","text":"<ul> <li>Configured Cypress testing and created related <code>.cy</code> files to achieve 1:1 testing, covering:</li> <li>Mounting of all components.</li> <li>Sidebar collapsing and expanding behavior.</li> <li>On-hover functionality of StatCard.</li> <li>Line graph, bar graph, and pie chart animations.</li> <li>Search functionality of TabTable.</li> <li>Toggle functionality on the settings page.</li> <li>Button click functionality on the settings page.</li> </ul>"},{"location":"sprint/Sprint2/#backend_1","title":"Backend","text":"<ul> <li> <p>Unit tests for the <code>Client</code> package to ensure proper API request handling.</p> </li> <li> <p><code>TestGetInfo</code></p> </li> <li>Verifies that <code>GetInfo()</code> correctly fetches server information and returns the expected status.</li> <li><code>TestGetEvent</code></li> <li>Tests the <code>GetEvent()</code> method to ensure the correct retrieval of a specific event by ID.</li> <li>Simulates a server response with event data and checks if the event ID matches.</li> <li><code>TestGetEvents</code></li> <li>Confirms that <code>GetEvents()</code> fetches a list of events with the expected length and structure.</li> <li><code>TestInsertEvent</code></li> <li>Validates that <code>InsertEvent()</code> successfully posts a single event to the server without errors.</li> <li><code>TestInsertEvents</code></li> <li>Similar to <code>TestInsertEvent</code> but for multiple events, verifying batch event insertion.</li> <li><code>TestDeleteEvent</code></li> <li>Ensures <code>DeleteEvent()</code> properly handles event deletion requests and server responses.</li> <li><code>TestGetEventCount</code></li> <li>Checks that <code>GetEventCount()</code> returns the correct number of events as indicated by the mock server.</li> <li><code>TestHeartbeat</code></li> <li>Evaluates the <code>Heartbeat()</code> method in both queued and non-queued modes.</li> <li>Simulates a \"heartbeat received\" response from the server.</li> <li><code>TestGetBucketsMap</code></li> <li>Tests the <code>GetBucketsMap()</code> method to ensure it correctly retrieves the list of buckets from the server.</li> <li><code>TestCreateAndDeleteBucket</code><ul> <li>Combines testing for <code>CreateBucket()</code> and <code>DeleteBucket()</code> methods.</li> <li>Simulates the full lifecycle of bucket creation and deletion.</li> </ul> </li> <li><code>TestExportAll</code><ul> <li>Validates that <code>ExportAll()</code> properly fetches all export data from the server.</li> </ul> </li> <li><code>TestExportBucket</code><ul> <li>Similar to <code>TestExportAll</code>, but specific to exporting data from a single bucket.</li> <li>Confirms that the returned data matches the expected \"bucket data\" value.</li> </ul> </li> <li><code>TestImportBucket</code><ul> <li>Checks that <code>ImportBucket()</code> correctly posts import data to the server and handles the response.</li> </ul> </li> <li><code>TestQuery</code><ul> <li>Tests the <code>Query()</code> method by sending a sample query with time periods and validating the result count.</li> <li>Simulates a \"result1\" and \"result2\" response from the server.</li> </ul> </li> <li><code>TestGetAndSetSetting</code><ul> <li>Covers both <code>GetSetting()</code> and <code>SetSetting()</code> methods.</li> <li>Verifies that settings are correctly retrieved and updated.</li> </ul> </li> <li> <p><code>TestWaitForStart</code></p> <ul> <li>Simulates server readiness using <code>WaitForStart()</code>.</li> <li>Tests both immediate success and timeout scenarios.</li> </ul> </li> <li> <p>Unit tests for <code>Routes</code> under the <code>api</code> package to validate the response format and error handling.</p> </li> <li> <p><code>TestGetInfo</code>     \u2013 Verifies that <code>GetInfo()</code> correctly fetches server information (hostname, version, server_name) from the API.</p> </li> <li><code>TestGetBuckets</code>     \u2013 Checks that <code>GetBuckets()</code> returns a map with all expected buckets and proper bucket details.</li> <li><code>TestGetBucket</code>     \u2013 Confirms that <code>CreateBucket()</code> accepts the correct payload and returns a successful response when creating a new bucket.</li> <li><code>TestUpdateBucket</code>     \u2013 Validates that <code>UpdateBucket()</code> properly updates the bucket information and returns success status.</li> <li><code>TestDeleteBucket</code>     \u2013 Ensures that <code>DeleteBucket()</code> with a force flag correctly deletes the specified bucket.</li> <li><code>TestGetEvents</code>     \u2013 Verifies that <code>GetEvents()</code> returns a list of events with correct details for a given bucket.</li> <li><code>TestGetEvent</code>     \u2013 Checks that <code>ExportAll()</code> returns all the export data, including all buckets with their associated details.</li> <li><code>TestExportBucket</code>     \u2013 Confirms that <code>ImportAll()</code> successfully posts bucket data to the API and handles the server response.</li> </ul>"},{"location":"sprint/Sprint2/#tasks","title":"Tasks","text":"<p>TO get a better understanding of the user stories, their status, and people contributing to them,</p> <ol> <li> <p>@PulkitGarg777 # Frontend</p> <ul> <li>Cleaned up some leftover codebases from Sprint1</li> <li>Create API response format list needed for data fetching</li> <li>Modify files to hold API templates for integration</li> <li>Configure Cypress unit testing</li> <li>Test 1:1 functionalities using Cypress issue #85 issue #53 PR #72 PR #84</li> </ul> </li> <li> <p>@YashDVerma # Frontend</p> <ul> <li>Fixed a bug where icons were not displaying</li> <li>Finished implementing colour theme system</li> <li>Fixed inconsistencies between pages  issue #38 issue #53 PR #68</li> </ul> </li> <li> <p>@shreyansh-nayak-ufl # Backend</p> <ul> <li>Worked on the <code>Browser Observer</code> module.</li> <li>Created a Manifest v3 compatible Chrome extension.</li> <li>Configured message passing between content scripts and background script.</li> <li>Implemented URL tracking and tab activity monitoring.</li> <li>Did complete testing of the <code>Server</code> routes.</li> <li>Created a Postman collection for testing the TimelyGator API.</li> <li>Generated detailed API documentation using Swagger. issue #69 issue #70 issue #71 issue #19</li> </ul> </li> <li> <p>@siddhant-0707 # Backend</p> <ul> <li>Implemented a <code>Client</code> module to interact with the TimelyGator <code>Server</code></li> <li>Built <code>AFK-Observer</code> which detects AFK status and sends heartbeats to the server.</li> <li>Implemented keyboard and mouse listeners to capture user activity contributing to AFK detection.</li> <li>Implemented API requests for data transfer between <code>AFK-Observer</code> and <code>Server</code> through the <code>Client</code>.</li> <li>Wrote comprehensive unit tests for <code>Client</code>.</li> <li>Identified issues such as empty bucket_id fields, implemented fixes to ensure accurate data persistence. issue #50 issue #74 PR #77 PR #65</li> </ul> </li> </ol>"},{"location":"sprint/Sprint2/#conclusion","title":"Conclusion","text":"<p>The tasks for Sprint 2 were completed successfully. The frontend and backend were integrated, and the necessary unit tests were written. The team will now focus on achieving full integration between the observers and the web UI in the next sprint. End-to-end (E2E) testing will be conducted to ensure seamless user workflows. Documentation for the API and key components will also be written.</p>"},{"location":"sprint/Sprint3/","title":"SE Project : Sprint 3","text":"<p>This document contains the details of the work done in Sprint 3 of the Software Engineering Project. This sprint focused on completing unfinished tasks from Sprint 2, implementing new functionality, and comprehensive testing of all components. The main goal was to ensure the application is ready with proper test coverage and documentation.</p> <p>Repository Link: Timelygator/Timelygator Sprint3.md: docs/files/sprint/sprint3.md</p>"},{"location":"sprint/Sprint3/#sprint-2-rolled-over-tasks","title":"Sprint 2 Rolled Over Tasks","text":"<p>The following tasks from Sprint 2 were completed in Sprint 3:</p>"},{"location":"sprint/Sprint3/#frontend","title":"Frontend","text":"<ul> <li>Component testing left in sprint 2</li> <li>File cleanups for better code quality </li> </ul>"},{"location":"sprint/Sprint3/#backend","title":"Backend","text":"<ul> <li>Added <code>browser-observer</code> tree to <code>server/observers</code> code. PR #98</li> <li>Moved all API test cases to centralized file under <code>routes_test.go</code> PR #100</li> </ul>"},{"location":"sprint/Sprint3/#new-functionality","title":"New Functionality","text":""},{"location":"sprint/Sprint3/#frontend_1","title":"Frontend","text":"<ul> <li>Started off with a bit of e2e testing and some real-time updation feature retention</li> <li>Testing API call behaviours manually to identify trends of data fetching and making modifications accordingly</li> <li>Persistent theme changes allows user to change website aesthetics.</li> </ul>"},{"location":"sprint/Sprint3/#backend_1","title":"Backend","text":"<ul> <li>Utilize <code>chrome.storage.sync</code> for persistence in the configuration of browser extension.</li> <li>Added <code>tg-faedata</code> synthetic sample data generation tool for TimelyGator</li> </ul>"},{"location":"sprint/Sprint3/#testing","title":"Testing","text":""},{"location":"sprint/Sprint3/#frontend-tests","title":"Frontend Tests","text":""},{"location":"sprint/Sprint3/#component-tests","title":"Component Tests","text":"<ol> <li>Real time updation testing</li> <li> <p>Test real-time data updates</p> </li> <li> <p>API behaviour analysis</p> </li> <li> <p>Test WebSocket connections and API fetch behaviour</p> </li> <li> <p>UI Improvements</p> </li> <li>Test responsive design and other minor UI improvements </li> </ol>"},{"location":"sprint/Sprint3/#end-to-end-tests","title":"End-to-End Tests","text":"<ul> <li>Complete user registration flow , some tasks will be completed in later sprint but main goal is to produce good API fetches</li> </ul>"},{"location":"sprint/Sprint3/#backend-tests","title":"Backend Tests","text":""},{"location":"sprint/Sprint3/#tg-fakedata-tests","title":"<code>tg-fakedata</code> Tests","text":"<ol> <li><code>TestParseDateFlag</code> </li> <li>Verifies that <code>parseDateFlag()</code> correctly parses valid date strings into <code>time.Time</code> objects.  </li> <li> <p>Ensures that invalid formats return appropriate errors.</p> </li> <li> <p><code>TestSameDay</code> </p> </li> <li>Tests the <code>sameDay()</code> function to confirm it accurately detects if two timestamps fall on the same calendar day in UTC.  </li> <li> <p>Validates both positive (same day) and negative (different days) scenarios.</p> </li> <li> <p><code>TestWeightedChoice</code> </p> </li> <li>Ensures <code>weightedChoice()</code> returns items based on defined probability weights.  </li> <li> <p>Performs statistical assertions over multiple iterations to check that higher-weighted items appear more frequently.</p> </li> <li> <p><code>TestPickDuration</code> </p> </li> <li>Validates that <code>pickDuration()</code> returns a duration within an expected range when a base minute value is provided.  </li> <li> <p>Tests fallback behaviour with <code>minutes == 0</code>, confirming it generates durations between 5 seconds and the max allowed seconds.</p> </li> <li> <p><code>TestGetString</code> </p> </li> <li>Confirms that <code>getString()</code> extracts string values correctly from a JSON-encoded data blob.  </li> <li>Ensures it returns an empty string when a key is not present in the JSON.</li> </ol> <p>Chrome Extension Tests    - Test Chrome extension integration</p>"},{"location":"sprint/Sprint3/#documentation","title":"Documentation","text":""},{"location":"sprint/Sprint3/#api-documentation","title":"API Documentation","text":"<ul> <li>Updated Swagger documentation with new endpoints for <code>heartbeat</code>.</li> </ul>"},{"location":"sprint/Sprint3/#tasks","title":"Tasks","text":"<ol> <li> <p>@PulkitGarg777 # Frontend</p> <ul> <li>Implemented real-time data updates</li> <li>Setup basic e2e testing files for some components</li> <li>API fetch behaviour testing for Tabs Table</li> </ul> </li> <li> <p>@YashDVerma # Frontend</p> <ul> <li>Fixed UI/UX inconsistencies</li> <li>Fixed theme persistence issues</li> <li>added unit testing for new features</li> </ul> </li> <li> <p>@shreyansh-nayak-ufl # Backend</p> <ul> <li>Completed Chrome extension implementation</li> <li>Implemented <code>chrome.storage.sync</code> API</li> <li>Unified BE test cases under <code>routes_test.go</code></li> </ul> </li> <li> <p>@siddhant-0707 # Backend</p> <ul> <li>Developed <code>tg-fakedata</code> to generate synthetic event data for TimelyGator</li> <li>Included features for simulating AFK status, window focus, and browser activity</li> <li>Wrote tests for <code>tg-fakedata</code></li> </ul> </li> </ol>"},{"location":"sprint/Sprint3/#conclusion","title":"Conclusion","text":"<p>Sprint 3 successfully completed the remaining tasks from Sprint 2 and implemented new functionality to enhance the application. The team focused on comprehensive testing, documentation, and performance optimization. The application now has proper test coverage, improved user experience, and robust backend functionality.</p>"},{"location":"sprint/Sprint4/","title":"SE Project : Sprint 4","text":"<p>This document contains the details of the work done in Sprint 4 of the Software Engineering Project. This sprint focused on implementing cross-platform window observation capabilities, improving documentation, and enhancing the overall system architecture. Building upon Sprint 3's foundation of testing and core functionality, this sprint introduced significant platform-specific features and improved system documentation.</p> <p>Repository Link: Timelygator/Timelygator Sprint4.md: docs/files/sprint/sprint4.md</p>"},{"location":"sprint/Sprint4/#sprint-3-rolled-over-tasks","title":"Sprint 3 Rolled Over Tasks","text":"<p>The following tasks from Sprint 3 were completed in Sprint 4:</p>"},{"location":"sprint/Sprint4/#frontend","title":"Frontend","text":"<ul> <li>Continued improvements to UsageOverviewChart component</li> <li>Fixed UI/UX inconsistencies and theme persistence issues</li> </ul>"},{"location":"sprint/Sprint4/#backend","title":"Backend","text":"<ul> <li>Enhanced browser-observer implementation with cross-platform support</li> <li>Improved test coverage and documentation</li> </ul>"},{"location":"sprint/Sprint4/#new-functionality","title":"New Functionality","text":""},{"location":"sprint/Sprint4/#frontend_1","title":"Frontend","text":"<ul> <li>Updated UsageOverviewChart component with improved data visualization</li> <li>Field modifications to extract specefic element from API calls</li> <li>Fixed UI/UX issues for better user experience</li> <li>Added FrontEnd documentation</li> </ul>"},{"location":"sprint/Sprint4/#backend_1","title":"Backend","text":"<ul> <li>Implemented cross-platform window observer for Linux, Windows, and macOS</li> <li>Added platform-specific window management using X11, Windows API, and macOS JXA</li> <li>Added AppleScript and JXA scripts for retrieving front application and window title</li> <li>Implemented proper permissions handling for macOS accessibility access</li> <li>Added CORS headers to allow cross-network access</li> <li>Fixed duration handling to use float64 seconds consistently</li> <li>Updated AFK timeout and poll time defaults for improved configuration</li> </ul>"},{"location":"sprint/Sprint4/#documentation","title":"Documentation","text":""},{"location":"sprint/Sprint4/#api-documentation","title":"API Documentation","text":"<p>This can now be visited at timelygator.github.io/TimelyGator, including architecture details, sprint information, etc.</p> <ul> <li>Implemented MkDocs for GitHub Pages documentation</li> <li>Added Swagger.json integration with MkDocs</li> <li>Moved sprint documentation to the website</li> <li>Updated documentation index to reflect README details</li> <li>Added comprehensive FE and BE documentation</li> </ul>"},{"location":"sprint/Sprint4/#tasks","title":"Tasks","text":"<ol> <li> <p>@siddhant-0707 # Backend</p> <ul> <li>Implemented cross-platform window observer</li> <li>Added platform-specific window management</li> <li>Fixed duration handling and configuration</li> <li>Added macOS permissions handling for accessibility access</li> <li>Wrote documentation for observers and client</li> </ul> </li> <li> <p>@shreyansh-nayak-ufl # Backend</p> <ul> <li>Implemented MkDocs for documentation</li> <li>Fixed CORS and network access issues</li> <li>Added Linux stub implementation</li> <li>Wrote documentation for FE/BE Architecture</li> <li>Deployed GitHub Actions for automated docs website</li> </ul> </li> <li> <p>@PulkitGarg777 # Frontend</p> <ul> <li>Continued improvements to UsageOverviewChart component</li> <li>Fixed UI/UX inconsistencies and ensured theme persistence across sessions</li> <li>Wrote unit tests for UsageOverviewChart and other key UI elements</li> <li>Worked on FrontEnd documentation</li> </ul> </li> <li> <p>@YashDVerma # Frontend</p> <ul> <li>Testing API call over UsageOverviewChart </li> <li>Added Profile editing feature</li> <li>Added FrontEnd documentation</li> <li>Fixed ActualCharts not reacting to changed TimeRange</li> </ul> </li> </ol>"},{"location":"sprint/Sprint4/#conclusion","title":"Conclusion","text":"<p>Sprint 4 successfully implemented cross-platform window observation capabilities and significantly improved the project's documentation. The team focused on platform-specific implementations, system architecture improvements, and comprehensive documentation. The application now supports window tracking across all major operating systems and has improved documentation for better maintainability and user understanding.</p>"}]}